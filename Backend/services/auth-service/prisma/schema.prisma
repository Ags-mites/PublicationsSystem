generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ROLE_AUTHOR
  ROLE_REVIEWER
  ROLE_EDITOR
  ROLE_ADMIN
  ROLE_READER
}

model User {
  id               String    @id @default(uuid()) @db.Uuid
  firstName        String    @map("first_name") @db.String(100)
  lastName         String    @map("last_name") @db.String(100)
  email            String    @unique @db.String(255)
  password         String    @map("password") @db.String(255)
  roles            UserRole[]
  affiliation      String?   @db.String(500)
  orcid            String?   @db.String(19)
  biography        String?   @db.String(2000)
  profileImageUrl  String?   @map("profile_image_url") @db.String(500)
  isActive         Boolean   @default(true) @map("is_active")
  lastLoginAt      DateTime? @map("last_login_at") @db.Timestamptz(6)
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  refreshTokens    RefreshToken[]

  @@map("users")
  @@index([email])
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  tokenHash String   @unique @map("token_hash") @db.String(255)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId])
  @@index([tokenHash])
}